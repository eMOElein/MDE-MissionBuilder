MDM_NPCHealthDetector = {}
MDM_NPCHealthDetector = MDM_Detector:class()

function MDM_NPCHealthDetector:new(args)
  local detector =  MDM_Detector:new(args)
  setmetatable(detector, self)
  self.__index = self

  if args.npc == nil then
    error("npc not set",2)
  end

  if not args.health then
    error("health not set",2)
  end

  detector.npc = args.npc
  detector.health = args.health
  return detector
end

function MDM_NPCHealthDetector.Test(self)
  if self.npc:GetHealth(self) <= self.health then
    MDM_Detector.NotifyCallbacks(self,{})
    return true
  end
end

function MDM_NPCHealthDetector.UnitTest()
  local counter = 0
  local npc = MDM_NPC:new({npcId="1",position=MDM_Utils.GetVector(1,1,1),direction=MDM_Utils.GetVector(1,1,1)})

  local function callback()
    counter = counter + 1
  end

  local detector =  MDM_NPCHealthDetector:new({
    npc = npc,
    health = 80,
    callback = callback
  })

  detector:Test()
  if counter ~= 0 then
    error("counter should be 0 but was " ..counter)
  end
  npc:SetHealth(90)
  detector:Test()
  if counter ~= 0 then
    error("counter should be 0 but was " ..counter)
  end
  npc:SetHealth(80)
  detector:Test()
  if counter ~= 1 then
    error("counter should be 1 but was " ..counter)
  end
  npc:SetHealth(75)
  detector:Test()

  if counter ~= 2 then
    error("counter should be 2 but was " ..counter)
  end
end





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































